{"uid":"89ed64b7c61dba1f","name":"AGINFRA-694: WeedSeeker2: Settings test","fullName":"test_cases#test_AGINFRA_694","historyId":"dd99e83ded5c6adbe42d80608fe05a86","time":{"start":1738092328702,"stop":1738092604099,"duration":275397},"description":"Test the retaining of settings of the WeedSeeker 2 system.","descriptionHtml":"<p>Test the retaining of settings of the WeedSeeker 2 system.</p>\n","status":"failed","statusMessage":"AssertionError: Message: Text '30' not found within 30 seconds","statusTrace":"@allure.feature(\"WeedSeeker2\")\n    @allure.story(\"Configuration\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @allure.title(\"AGINFRA-694: WeedSeeker2: Settings test\")\n    @allure.description(\"Test the retaining of settings of the WeedSeeker 2 system.\")\n    @allure.issue(\"https://jira.trimble.tools/browse/AGINFRA-694\")\n    # Diagnostics code: 114860\n    # Parameters code: 731935\n    # User: 715353\n    def test_AGINFRA_694():\n        test_name = \"AGINFRA-694\"\n    \n        # Set up the Appium driver\n        driver = setup_driver()\n        helper = AppiumHelper(driver)\n    \n        try:\n            helper.start_screen_recording()\n    \n            helper.restart_app()\n    \n            # Find and click the WeedSeeker next page button\n            helper.find_and_click_image(IMAGE_IDS[\"weedseeker_next_page\"])\n            # Find and click the settings icon\n            helper.find_and_click_image(IMAGE_IDS[\"settings_icon\"])\n    \n            helper.find_text(\"PARAMETERS\", allowable_difference=2)\n    \n            # Define main parameters with random values\n            main_parameters = {\n                \"working_width\": {\n                    \"num\": random.choice([10.0, 20.0, 30.0, 40.0]),\n                    \"location\": (730, 328),\n                },\n                \"off_below\": {\n                    \"num\": random.choice([0.1, 0.2, 0.3, 0.4]),\n                    \"location\": (745, 417),\n                },\n                \"nozzle_height\": {\n                    \"num\": random.choice([15.0, 20.0, 25.0, 30.0]),\n                    \"location\": (737, 506),\n                },\n                \"d_overspray\": {\n                    \"num\": random.choice([1.0, 2.0, 3.0, 4.0]),\n                    \"location\": (735, 586),\n                }\n            }\n    \n            # Define boom parameters with random values\n            boom_parameters = {\n                \"sections\": {\n                    \"num\": random.choice([2, 4, 6, 8, 10]),\n                    \"location\": (775, 328),\n                }\n            }\n            boom_parameters[\"nozzles\"] = {\n                # Nozzle number is 3 times (set in config) the number of sections\n                \"num\": boom_parameters[\"sections\"][\"num\"] * 3,\n                \"location\": (775, 414)\n            }\n    \n            # Define sprayer parameters with random values\n            sprayer_parameters = {\n                \"min\": {\n                    \"num\": random.choice([5, 8, 10, 12]),\n                    \"location\": (743, 287),\n                },\n                \"max\": {\n                    \"num\": random.choice([15.0, 20.0, 25.0, 30.0]),\n                    \"location\": (736, 331),\n                },\n            }\n    \n            # Define sprayer type parameters with random values\n            sprayer_type_parameters = {\n                \"type\": {\n                    \"choices\": [APP_IDS[\"FREQUENCY\"],\n                                APP_IDS[\"ANALOG\"],\n                                APP_IDS[\"SIMULATED\"]],\n                    \"location\": (663, 424),\n                }\n            }\n    \n            # Set the main parameters\n            for key, details in main_parameters.items():\n                helper.click_point(details[\"location\"])\n                helper.enter_text(str(details[\"num\"]))\n            helper.find_and_click_image(IMAGE_IDS[\"unchecked_icon\"])\n    \n            # Set boom parameters and acknowledge the pop-up\n            helper.find_and_click_image(IMAGE_IDS[\"boom_config_icon\"])\n            # Add user password entry\n            user_password_entry = (726, 583)\n            helper.click_point(user_password_entry)\n            helper.enter_text(\"715353\")\n    \n            for key, details in boom_parameters.items():\n                if key == \"sections\":\n                    helper.click_point(details[\"location\"])\n                    helper.enter_text(str(details[\"num\"]))\n                    ack_button = WebDriverWait(driver, 30).until(\n                        EC.element_to_be_clickable((AppiumBy.ID, APP_IDS[\"ACK_BUTTON\"]))\n                    )\n                    ack_button.click()\n                    sleep(5)\n    \n            helper.find_and_click_image(IMAGE_IDS[\"back_icon\"])\n    \n            helper.find_and_click_image(IMAGE_IDS[\"pressure_config_icon\"])\n            for key, details in sprayer_parameters.items():\n                if details:\n                    helper.click_point(details[\"location\"])\n                    helper.enter_text(str(details[\"num\"]))\n    \n            helper.restart_app()\n    \n            # Find and click the WeedSeeker next page button\n            helper.find_and_click_image(IMAGE_IDS[\"weedseeker_next_page\"])\n            # Find and click the settings icon\n            helper.find_and_click_image(IMAGE_IDS[\"settings_icon\"])\n    \n            helper.find_text(\"PARAMETERS\", allowable_difference=2)\n    \n            # Verify that the main parameters were saved\n            for key, details in main_parameters.items():\n                helper.click_point(details[\"location\"])\n                WebDriverWait(driver, 30).until(\n                        EC.presence_of_element_located((AppiumBy.ID, APP_IDS[\"VALUE_ALERT\"]))\n                    )\n                text_box = driver.find_element(AppiumBy.ID, APP_IDS[\"TEXT_BOX\"])\n                assert float(text_box.text) == details[\"num\"], f\"Expected {details['num']} but got {text_box.text}\"\n    \n                logging.info(f\"Success: {key} retained the value {details['num']}.\")\n    \n                ok_button = driver.find_element(by=AppiumBy.ID, value=APP_IDS[\"OK_ID\"])\n                ok_button.click()\n                driver.execute_script('mobile: hideKeyboard')\n    \n                sleep(5)\n    \n            logging.info(f\"Success: Fast Filter selection saved.\")\n            helper.find_image(IMAGE_IDS[\"checked_icon\"])\n    \n            helper.find_and_click_image(IMAGE_IDS[\"checked_icon\"])\n    \n            # Verify that the boom settings were saved\n            helper.find_and_click_image(IMAGE_IDS[\"boom_config_icon\"])\n            helper.find_text(\"BOOM\", 15)\n            for key, details in boom_parameters.items():\n                if key == \"nozzles\":\n                    # Find and confirm the number of nozzles in the area of the location\n>                   helper.find_text(details[\"num\"], screen_part=\"center\")\n\ntest_cases.py:231: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utils.AppiumHelper object at 0x10ab32d50>, search_text = 30, timeout = 30, allowable_difference = 0\ncoordinates = (320, 200, 960, 600), within = False, screen_part = 'center'\n\n    def find_text(self, search_text, timeout=30, allowable_difference=0, coordinates=None, within=False, screen_part=None):\n        \"\"\"\n        Capture a screenshot and use OCR to find the specified text within a timeout period.\n    \n        :param search_text: Text to search for in the screenshot.\n        :param timeout: Maximum time to wait for the text to appear. Default is 30 seconds.\n        :param allowable_difference: Maximum allowable difference between the search text and the extracted text.\n        :param coordinates: Tuple containing the (x, y, x2, y2) coordinates to crop the image. Default is None.\n        :param within: Boolean indicating whether to search for the text within other text. Default is False.\n        :param screen_part: The portion of the screen to search in. Options are:\n                            'bottom_half', 'top_half', 'left_half', 'right_half',\n                            'top_left_quadrant', 'top_right_quadrant',\n                            'bottom_left_quadrant', 'bottom_right_quadrant', 'center'. Default is None.\n        :return: True if the text is found within the timeout period, False otherwise.\n        \"\"\"\n        logging.info(f\"Searching for text: {search_text}\")\n        normalized_search_text = normalize_text(search_text)\n        end_time = time.time() + timeout\n        while time.time() < end_time:\n    \n            if coordinates or screen_part:\n                if screen_part:\n                    coordinates = self.get_screen_part(screen_part)\n                x, y, x2, y2 = coordinates\n                screenshot = self.driver.get_screenshot_as_png()\n                image = Image.open(BytesIO(screenshot))\n                cropped_image = image.crop((x, y, x2, y2))\n                image = cropped_image\n                image.save(f\"screenshots/debug/image.png\")\n            else:\n                screenshot = self.driver.get_screenshot_as_png()\n                image = Image.open(BytesIO(screenshot))\n    \n            # Preprocess the image to enhance text recognition\n            preprocessed_image = preprocess_image(image)\n    \n            # Save the preprocessed image locally for checking\n            preprocessed_image.save(f\"screenshots/debug/preprocessed_image.png\")\n    \n            # Use Tesseract OCR to extract text data along with their bounding box coordinates\n            data = pytesseract.image_to_data(preprocessed_image, output_type=Output.DICT)\n    \n            # Iterate through the extracted text data\n            for i, text in enumerate(data['text']):\n                # Normalize the extracted text\n                normalized_text = normalize_text(text)\n                logging.info(f\"Checking text: {normalized_text}\")\n                # Check if the search text is found in the extracted text\n                if within:\n                    for word in data['text']:\n                        if normalized_search_text in normalize_text(word):\n                            logging.info(f\"Found text '{search_text}'\")\n                            return True\n                else:\n                    if is_text_similar(normalized_search_text, normalized_text, allowable_difference):\n                        logging.info(f\"Found text '{search_text}'\")\n                        return True\n            time.sleep(1)\n>       raise TimeoutException(f\"Text '{search_text}' not found within {timeout} seconds\")\nE       selenium.common.exceptions.TimeoutException: Message: Text '30' not found within 30 seconds\n\nutils.py:167: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\n    @allure.feature(\"WeedSeeker2\")\n    @allure.story(\"Configuration\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @allure.title(\"AGINFRA-694: WeedSeeker2: Settings test\")\n    @allure.description(\"Test the retaining of settings of the WeedSeeker 2 system.\")\n    @allure.issue(\"https://jira.trimble.tools/browse/AGINFRA-694\")\n    # Diagnostics code: 114860\n    # Parameters code: 731935\n    # User: 715353\n    def test_AGINFRA_694():\n        test_name = \"AGINFRA-694\"\n    \n        # Set up the Appium driver\n        driver = setup_driver()\n        helper = AppiumHelper(driver)\n    \n        try:\n            helper.start_screen_recording()\n    \n            helper.restart_app()\n    \n            # Find and click the WeedSeeker next page button\n            helper.find_and_click_image(IMAGE_IDS[\"weedseeker_next_page\"])\n            # Find and click the settings icon\n            helper.find_and_click_image(IMAGE_IDS[\"settings_icon\"])\n    \n            helper.find_text(\"PARAMETERS\", allowable_difference=2)\n    \n            # Define main parameters with random values\n            main_parameters = {\n                \"working_width\": {\n                    \"num\": random.choice([10.0, 20.0, 30.0, 40.0]),\n                    \"location\": (730, 328),\n                },\n                \"off_below\": {\n                    \"num\": random.choice([0.1, 0.2, 0.3, 0.4]),\n                    \"location\": (745, 417),\n                },\n                \"nozzle_height\": {\n                    \"num\": random.choice([15.0, 20.0, 25.0, 30.0]),\n                    \"location\": (737, 506),\n                },\n                \"d_overspray\": {\n                    \"num\": random.choice([1.0, 2.0, 3.0, 4.0]),\n                    \"location\": (735, 586),\n                }\n            }\n    \n            # Define boom parameters with random values\n            boom_parameters = {\n                \"sections\": {\n                    \"num\": random.choice([2, 4, 6, 8, 10]),\n                    \"location\": (775, 328),\n                }\n            }\n            boom_parameters[\"nozzles\"] = {\n                # Nozzle number is 3 times (set in config) the number of sections\n                \"num\": boom_parameters[\"sections\"][\"num\"] * 3,\n                \"location\": (775, 414)\n            }\n    \n            # Define sprayer parameters with random values\n            sprayer_parameters = {\n                \"min\": {\n                    \"num\": random.choice([5, 8, 10, 12]),\n                    \"location\": (743, 287),\n                },\n                \"max\": {\n                    \"num\": random.choice([15.0, 20.0, 25.0, 30.0]),\n                    \"location\": (736, 331),\n                },\n            }\n    \n            # Define sprayer type parameters with random values\n            sprayer_type_parameters = {\n                \"type\": {\n                    \"choices\": [APP_IDS[\"FREQUENCY\"],\n                                APP_IDS[\"ANALOG\"],\n                                APP_IDS[\"SIMULATED\"]],\n                    \"location\": (663, 424),\n                }\n            }\n    \n            # Set the main parameters\n            for key, details in main_parameters.items():\n                helper.click_point(details[\"location\"])\n                helper.enter_text(str(details[\"num\"]))\n            helper.find_and_click_image(IMAGE_IDS[\"unchecked_icon\"])\n    \n            # Set boom parameters and acknowledge the pop-up\n            helper.find_and_click_image(IMAGE_IDS[\"boom_config_icon\"])\n            # Add user password entry\n            user_password_entry = (726, 583)\n            helper.click_point(user_password_entry)\n            helper.enter_text(\"715353\")\n    \n            for key, details in boom_parameters.items():\n                if key == \"sections\":\n                    helper.click_point(details[\"location\"])\n                    helper.enter_text(str(details[\"num\"]))\n                    ack_button = WebDriverWait(driver, 30).until(\n                        EC.element_to_be_clickable((AppiumBy.ID, APP_IDS[\"ACK_BUTTON\"]))\n                    )\n                    ack_button.click()\n                    sleep(5)\n    \n            helper.find_and_click_image(IMAGE_IDS[\"back_icon\"])\n    \n            helper.find_and_click_image(IMAGE_IDS[\"pressure_config_icon\"])\n            for key, details in sprayer_parameters.items():\n                if details:\n                    helper.click_point(details[\"location\"])\n                    helper.enter_text(str(details[\"num\"]))\n    \n            helper.restart_app()\n    \n            # Find and click the WeedSeeker next page button\n            helper.find_and_click_image(IMAGE_IDS[\"weedseeker_next_page\"])\n            # Find and click the settings icon\n            helper.find_and_click_image(IMAGE_IDS[\"settings_icon\"])\n    \n            helper.find_text(\"PARAMETERS\", allowable_difference=2)\n    \n            # Verify that the main parameters were saved\n            for key, details in main_parameters.items():\n                helper.click_point(details[\"location\"])\n                WebDriverWait(driver, 30).until(\n                        EC.presence_of_element_located((AppiumBy.ID, APP_IDS[\"VALUE_ALERT\"]))\n                    )\n                text_box = driver.find_element(AppiumBy.ID, APP_IDS[\"TEXT_BOX\"])\n                assert float(text_box.text) == details[\"num\"], f\"Expected {details['num']} but got {text_box.text}\"\n    \n                logging.info(f\"Success: {key} retained the value {details['num']}.\")\n    \n                ok_button = driver.find_element(by=AppiumBy.ID, value=APP_IDS[\"OK_ID\"])\n                ok_button.click()\n                driver.execute_script('mobile: hideKeyboard')\n    \n                sleep(5)\n    \n            logging.info(f\"Success: Fast Filter selection saved.\")\n            helper.find_image(IMAGE_IDS[\"checked_icon\"])\n    \n            helper.find_and_click_image(IMAGE_IDS[\"checked_icon\"])\n    \n            # Verify that the boom settings were saved\n            helper.find_and_click_image(IMAGE_IDS[\"boom_config_icon\"])\n            helper.find_text(\"BOOM\", 15)\n            for key, details in boom_parameters.items():\n                if key == \"nozzles\":\n                    # Find and confirm the number of nozzles in the area of the location\n                    helper.find_text(details[\"num\"], screen_part=\"center\")\n                    logging.info(f\"Success: {key} retained the value {details['num']}.\")\n                else:\n                    pass\n                    helper.click_point(details[\"location\"])\n                    WebDriverWait(driver, 30).until(\n                        EC.presence_of_element_located((AppiumBy.ID, APP_IDS[\"VALUE_ALERT\"]))\n                    )\n                    text_box = driver.find_element(AppiumBy.ID, APP_IDS[\"TEXT_BOX\"])\n                    assert float(text_box.text) == details[\"num\"], f\"Expected {details['num']} but got {text_box.text}\"\n    \n                    logging.info(f\"Success: {key} retained the value {details['num']}.\")\n    \n                    ok_button = driver.find_element(by=AppiumBy.ID, value=APP_IDS[\"OK_ID\"])\n                    ok_button.click()\n                    driver.execute_script('mobile: hideKeyboard')\n    \n                    ack_button = WebDriverWait(driver, 30).until(\n                            EC.element_to_be_clickable((AppiumBy.ID, APP_IDS[\"ACK_BUTTON\"]))\n                        )\n                    ack_button.click()\n                    sleep(5)\n    \n            helper.find_and_click_image(IMAGE_IDS[\"back_icon\"])\n    \n            helper.find_and_click_image(IMAGE_IDS[\"pressure_config_icon\"])\n    \n            # Verify that the sprayer settings were saved\n            for key, details in sprayer_parameters.items():\n                helper.click_point(details[\"location\"])\n                WebDriverWait(driver, 30).until(\n                        EC.presence_of_element_located((AppiumBy.ID, APP_IDS[\"VALUE_ALERT\"]))\n                    )\n                text_box = driver.find_element(AppiumBy.ID, APP_IDS[\"TEXT_BOX\"])\n                assert float(text_box.text) == details[\"num\"], f\"Expected {details['num']} but got {text_box.text}\"\n    \n                logging.info(f\"Success: {key} retained the value {details['num']}.\")\n    \n                ok_button = driver.find_element(by=AppiumBy.ID, value=APP_IDS[\"OK_ID\"])\n                ok_button.click()\n                driver.execute_script('mobile: hideKeyboard')\n    \n                sleep(5)\n    \n            # Set up and verify sprayer type parameters\n            type_input = {}\n            for key, details in sprayer_type_parameters.items():\n                for choice in details[\"choices\"]:\n    \n                    type_input = {\n                        \"num\":\n                            random.choice([5.5, 6.5, 7.5, 8.5]) if choice is APP_IDS[\"FREQUENCY\"]\n                            else random.choice([10, 20, 30, 40]) if choice is APP_IDS[\"SIMULATED\"]\n                            else None,\n                        \"location\":\n                            (717, 590) if choice is APP_IDS[\"FREQUENCY\"]\n                            else (736, 500) if choice is APP_IDS[\"SIMULATED\"]\n                            else None}\n    \n    \n                    helper.click_point(details[\"location\"])\n    \n                    sensor_type = WebDriverWait(driver, 60).until(\n                    EC.presence_of_element_located((AppiumBy.XPATH, choice))\n                    )\n                    sensor_type.click()\n                    ack_button = WebDriverWait(driver, 30).until(\n                            EC.element_to_be_clickable((AppiumBy.ID, APP_IDS[\"ACK_BUTTON\"]))\n                        )\n                    ack_button.click()\n                    if type_input[\"num\"] is not None:\n                        helper.click_point(type_input[\"location\"])\n                        helper.enter_text(type_input[\"num\"])\n    \n                        helper.restart_app()\n    \n                        # Find and click the WeedSeeker next page button\n                        helper.find_and_click_image(IMAGE_IDS[\"weedseeker_next_page\"])\n                        # Find and click the settings icon\n                        helper.find_and_click_image(IMAGE_IDS[\"settings_icon\"])\n    \n                        helper.find_and_click_image(IMAGE_IDS[\"pressure_config_icon\"])\n    \n                        # After restart, confirm that type_input is saved\n                        helper.click_point(type_input[\"location\"])\n                        WebDriverWait(driver, 30).until(\n                            EC.presence_of_element_located((AppiumBy.ID, APP_IDS[\"VALUE_ALERT\"]))\n                        )\n                        text_box = driver.find_element(AppiumBy.ID, APP_IDS[\"TEXT_BOX\"])\n                        assert float(text_box.text) == type_input[\"num\"], f\"Expected {type_input['num']} but got {text_box.text}\"\n    \n                        logging.info(f\"Success: {key} retained the value {type_input['num']}.\")\n    \n                        ok_button = driver.find_element(by=AppiumBy.ID, value=APP_IDS[\"OK_ID\"])\n                        ok_button.click()\n                        driver.execute_script('mobile: hideKeyboard')\n    \n                        sleep(5)\n    \n            helper.find_and_click_image(IMAGE_IDS[\"go_home_icon\"])\n    \n            helper.stop_screen_recording(test_name)\n        except Exception as e:\n>           helper.raise_and_stop(e, test_name)\n\ntest_cases.py:334: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utils.AppiumHelper object at 0x10ab32d50>\nmessage = TimeoutException(\"Text '30' not found within 30 seconds\"), testcase = 'AGINFRA-694'\n\n    def raise_and_stop(self, message, testcase):\n        \"\"\"\n        Raise an assertion error with the specified message and stop screen recording.\n    \n        :param message: Error message to raise.\n        :param testcase: Name of the test case.\n        \"\"\"\n        logging.error(Fore.RED + str(message))\n        self.stop_screen_recording(testcase)\n        self.capture_screenshot(f'{testcase}: {message}')\n>       raise AssertionError(message)\nE       AssertionError: Message: Text '30' not found within 30 seconds\n\nutils.py:343: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"Test the retaining of settings of the WeedSeeker 2 system.","status":"failed","statusMessage":"AssertionError: Message: Text '30' not found within 30 seconds","statusTrace":"@allure.feature(\"WeedSeeker2\")\n    @allure.story(\"Configuration\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @allure.title(\"AGINFRA-694: WeedSeeker2: Settings test\")\n    @allure.description(\"Test the retaining of settings of the WeedSeeker 2 system.\")\n    @allure.issue(\"https://jira.trimble.tools/browse/AGINFRA-694\")\n    # Diagnostics code: 114860\n    # Parameters code: 731935\n    # User: 715353\n    def test_AGINFRA_694():\n        test_name = \"AGINFRA-694\"\n    \n        # Set up the Appium driver\n        driver = setup_driver()\n        helper = AppiumHelper(driver)\n    \n        try:\n            helper.start_screen_recording()\n    \n            helper.restart_app()\n    \n            # Find and click the WeedSeeker next page button\n            helper.find_and_click_image(IMAGE_IDS[\"weedseeker_next_page\"])\n            # Find and click the settings icon\n            helper.find_and_click_image(IMAGE_IDS[\"settings_icon\"])\n    \n            helper.find_text(\"PARAMETERS\", allowable_difference=2)\n    \n            # Define main parameters with random values\n            main_parameters = {\n                \"working_width\": {\n                    \"num\": random.choice([10.0, 20.0, 30.0, 40.0]),\n                    \"location\": (730, 328),\n                },\n                \"off_below\": {\n                    \"num\": random.choice([0.1, 0.2, 0.3, 0.4]),\n                    \"location\": (745, 417),\n                },\n                \"nozzle_height\": {\n                    \"num\": random.choice([15.0, 20.0, 25.0, 30.0]),\n                    \"location\": (737, 506),\n                },\n                \"d_overspray\": {\n                    \"num\": random.choice([1.0, 2.0, 3.0, 4.0]),\n                    \"location\": (735, 586),\n                }\n            }\n    \n            # Define boom parameters with random values\n            boom_parameters = {\n                \"sections\": {\n                    \"num\": random.choice([2, 4, 6, 8, 10]),\n                    \"location\": (775, 328),\n                }\n            }\n            boom_parameters[\"nozzles\"] = {\n                # Nozzle number is 3 times (set in config) the number of sections\n                \"num\": boom_parameters[\"sections\"][\"num\"] * 3,\n                \"location\": (775, 414)\n            }\n    \n            # Define sprayer parameters with random values\n            sprayer_parameters = {\n                \"min\": {\n                    \"num\": random.choice([5, 8, 10, 12]),\n                    \"location\": (743, 287),\n                },\n                \"max\": {\n                    \"num\": random.choice([15.0, 20.0, 25.0, 30.0]),\n                    \"location\": (736, 331),\n                },\n            }\n    \n            # Define sprayer type parameters with random values\n            sprayer_type_parameters = {\n                \"type\": {\n                    \"choices\": [APP_IDS[\"FREQUENCY\"],\n                                APP_IDS[\"ANALOG\"],\n                                APP_IDS[\"SIMULATED\"]],\n                    \"location\": (663, 424),\n                }\n            }\n    \n            # Set the main parameters\n            for key, details in main_parameters.items():\n                helper.click_point(details[\"location\"])\n                helper.enter_text(str(details[\"num\"]))\n            helper.find_and_click_image(IMAGE_IDS[\"unchecked_icon\"])\n    \n            # Set boom parameters and acknowledge the pop-up\n            helper.find_and_click_image(IMAGE_IDS[\"boom_config_icon\"])\n            # Add user password entry\n            user_password_entry = (726, 583)\n            helper.click_point(user_password_entry)\n            helper.enter_text(\"715353\")\n    \n            for key, details in boom_parameters.items():\n                if key == \"sections\":\n                    helper.click_point(details[\"location\"])\n                    helper.enter_text(str(details[\"num\"]))\n                    ack_button = WebDriverWait(driver, 30).until(\n                        EC.element_to_be_clickable((AppiumBy.ID, APP_IDS[\"ACK_BUTTON\"]))\n                    )\n                    ack_button.click()\n                    sleep(5)\n    \n            helper.find_and_click_image(IMAGE_IDS[\"back_icon\"])\n    \n            helper.find_and_click_image(IMAGE_IDS[\"pressure_config_icon\"])\n            for key, details in sprayer_parameters.items():\n                if details:\n                    helper.click_point(details[\"location\"])\n                    helper.enter_text(str(details[\"num\"]))\n    \n            helper.restart_app()\n    \n            # Find and click the WeedSeeker next page button\n            helper.find_and_click_image(IMAGE_IDS[\"weedseeker_next_page\"])\n            # Find and click the settings icon\n            helper.find_and_click_image(IMAGE_IDS[\"settings_icon\"])\n    \n            helper.find_text(\"PARAMETERS\", allowable_difference=2)\n    \n            # Verify that the main parameters were saved\n            for key, details in main_parameters.items():\n                helper.click_point(details[\"location\"])\n                WebDriverWait(driver, 30).until(\n                        EC.presence_of_element_located((AppiumBy.ID, APP_IDS[\"VALUE_ALERT\"]))\n                    )\n                text_box = driver.find_element(AppiumBy.ID, APP_IDS[\"TEXT_BOX\"])\n                assert float(text_box.text) == details[\"num\"], f\"Expected {details['num']} but got {text_box.text}\"\n    \n                logging.info(f\"Success: {key} retained the value {details['num']}.\")\n    \n                ok_button = driver.find_element(by=AppiumBy.ID, value=APP_IDS[\"OK_ID\"])\n                ok_button.click()\n                driver.execute_script('mobile: hideKeyboard')\n    \n                sleep(5)\n    \n            logging.info(f\"Success: Fast Filter selection saved.\")\n            helper.find_image(IMAGE_IDS[\"checked_icon\"])\n    \n            helper.find_and_click_image(IMAGE_IDS[\"checked_icon\"])\n    \n            # Verify that the boom settings were saved\n            helper.find_and_click_image(IMAGE_IDS[\"boom_config_icon\"])\n            helper.find_text(\"BOOM\", 15)\n            for key, details in boom_parameters.items():\n                if key == \"nozzles\":\n                    # Find and confirm the number of nozzles in the area of the location\n>                   helper.find_text(details[\"num\"], screen_part=\"center\")\n\ntest_cases.py:231: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utils.AppiumHelper object at 0x10ab32d50>, search_text = 30, timeout = 30, allowable_difference = 0\ncoordinates = (320, 200, 960, 600), within = False, screen_part = 'center'\n\n    def find_text(self, search_text, timeout=30, allowable_difference=0, coordinates=None, within=False, screen_part=None):\n        \"\"\"\n        Capture a screenshot and use OCR to find the specified text within a timeout period.\n    \n        :param search_text: Text to search for in the screenshot.\n        :param timeout: Maximum time to wait for the text to appear. Default is 30 seconds.\n        :param allowable_difference: Maximum allowable difference between the search text and the extracted text.\n        :param coordinates: Tuple containing the (x, y, x2, y2) coordinates to crop the image. Default is None.\n        :param within: Boolean indicating whether to search for the text within other text. Default is False.\n        :param screen_part: The portion of the screen to search in. Options are:\n                            'bottom_half', 'top_half', 'left_half', 'right_half',\n                            'top_left_quadrant', 'top_right_quadrant',\n                            'bottom_left_quadrant', 'bottom_right_quadrant', 'center'. Default is None.\n        :return: True if the text is found within the timeout period, False otherwise.\n        \"\"\"\n        logging.info(f\"Searching for text: {search_text}\")\n        normalized_search_text = normalize_text(search_text)\n        end_time = time.time() + timeout\n        while time.time() < end_time:\n    \n            if coordinates or screen_part:\n                if screen_part:\n                    coordinates = self.get_screen_part(screen_part)\n                x, y, x2, y2 = coordinates\n                screenshot = self.driver.get_screenshot_as_png()\n                image = Image.open(BytesIO(screenshot))\n                cropped_image = image.crop((x, y, x2, y2))\n                image = cropped_image\n                image.save(f\"screenshots/debug/image.png\")\n            else:\n                screenshot = self.driver.get_screenshot_as_png()\n                image = Image.open(BytesIO(screenshot))\n    \n            # Preprocess the image to enhance text recognition\n            preprocessed_image = preprocess_image(image)\n    \n            # Save the preprocessed image locally for checking\n            preprocessed_image.save(f\"screenshots/debug/preprocessed_image.png\")\n    \n            # Use Tesseract OCR to extract text data along with their bounding box coordinates\n            data = pytesseract.image_to_data(preprocessed_image, output_type=Output.DICT)\n    \n            # Iterate through the extracted text data\n            for i, text in enumerate(data['text']):\n                # Normalize the extracted text\n                normalized_text = normalize_text(text)\n                logging.info(f\"Checking text: {normalized_text}\")\n                # Check if the search text is found in the extracted text\n                if within:\n                    for word in data['text']:\n                        if normalized_search_text in normalize_text(word):\n                            logging.info(f\"Found text '{search_text}'\")\n                            return True\n                else:\n                    if is_text_similar(normalized_search_text, normalized_text, allowable_difference):\n                        logging.info(f\"Found text '{search_text}'\")\n                        return True\n            time.sleep(1)\n>       raise TimeoutException(f\"Text '{search_text}' not found within {timeout} seconds\")\nE       selenium.common.exceptions.TimeoutException: Message: Text '30' not found within 30 seconds\n\nutils.py:167: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\n    @allure.feature(\"WeedSeeker2\")\n    @allure.story(\"Configuration\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @allure.title(\"AGINFRA-694: WeedSeeker2: Settings test\")\n    @allure.description(\"Test the retaining of settings of the WeedSeeker 2 system.\")\n    @allure.issue(\"https://jira.trimble.tools/browse/AGINFRA-694\")\n    # Diagnostics code: 114860\n    # Parameters code: 731935\n    # User: 715353\n    def test_AGINFRA_694():\n        test_name = \"AGINFRA-694\"\n    \n        # Set up the Appium driver\n        driver = setup_driver()\n        helper = AppiumHelper(driver)\n    \n        try:\n            helper.start_screen_recording()\n    \n            helper.restart_app()\n    \n            # Find and click the WeedSeeker next page button\n            helper.find_and_click_image(IMAGE_IDS[\"weedseeker_next_page\"])\n            # Find and click the settings icon\n            helper.find_and_click_image(IMAGE_IDS[\"settings_icon\"])\n    \n            helper.find_text(\"PARAMETERS\", allowable_difference=2)\n    \n            # Define main parameters with random values\n            main_parameters = {\n                \"working_width\": {\n                    \"num\": random.choice([10.0, 20.0, 30.0, 40.0]),\n                    \"location\": (730, 328),\n                },\n                \"off_below\": {\n                    \"num\": random.choice([0.1, 0.2, 0.3, 0.4]),\n                    \"location\": (745, 417),\n                },\n                \"nozzle_height\": {\n                    \"num\": random.choice([15.0, 20.0, 25.0, 30.0]),\n                    \"location\": (737, 506),\n                },\n                \"d_overspray\": {\n                    \"num\": random.choice([1.0, 2.0, 3.0, 4.0]),\n                    \"location\": (735, 586),\n                }\n            }\n    \n            # Define boom parameters with random values\n            boom_parameters = {\n                \"sections\": {\n                    \"num\": random.choice([2, 4, 6, 8, 10]),\n                    \"location\": (775, 328),\n                }\n            }\n            boom_parameters[\"nozzles\"] = {\n                # Nozzle number is 3 times (set in config) the number of sections\n                \"num\": boom_parameters[\"sections\"][\"num\"] * 3,\n                \"location\": (775, 414)\n            }\n    \n            # Define sprayer parameters with random values\n            sprayer_parameters = {\n                \"min\": {\n                    \"num\": random.choice([5, 8, 10, 12]),\n                    \"location\": (743, 287),\n                },\n                \"max\": {\n                    \"num\": random.choice([15.0, 20.0, 25.0, 30.0]),\n                    \"location\": (736, 331),\n                },\n            }\n    \n            # Define sprayer type parameters with random values\n            sprayer_type_parameters = {\n                \"type\": {\n                    \"choices\": [APP_IDS[\"FREQUENCY\"],\n                                APP_IDS[\"ANALOG\"],\n                                APP_IDS[\"SIMULATED\"]],\n                    \"location\": (663, 424),\n                }\n            }\n    \n            # Set the main parameters\n            for key, details in main_parameters.items():\n                helper.click_point(details[\"location\"])\n                helper.enter_text(str(details[\"num\"]))\n            helper.find_and_click_image(IMAGE_IDS[\"unchecked_icon\"])\n    \n            # Set boom parameters and acknowledge the pop-up\n            helper.find_and_click_image(IMAGE_IDS[\"boom_config_icon\"])\n            # Add user password entry\n            user_password_entry = (726, 583)\n            helper.click_point(user_password_entry)\n            helper.enter_text(\"715353\")\n    \n            for key, details in boom_parameters.items():\n                if key == \"sections\":\n                    helper.click_point(details[\"location\"])\n                    helper.enter_text(str(details[\"num\"]))\n                    ack_button = WebDriverWait(driver, 30).until(\n                        EC.element_to_be_clickable((AppiumBy.ID, APP_IDS[\"ACK_BUTTON\"]))\n                    )\n                    ack_button.click()\n                    sleep(5)\n    \n            helper.find_and_click_image(IMAGE_IDS[\"back_icon\"])\n    \n            helper.find_and_click_image(IMAGE_IDS[\"pressure_config_icon\"])\n            for key, details in sprayer_parameters.items():\n                if details:\n                    helper.click_point(details[\"location\"])\n                    helper.enter_text(str(details[\"num\"]))\n    \n            helper.restart_app()\n    \n            # Find and click the WeedSeeker next page button\n            helper.find_and_click_image(IMAGE_IDS[\"weedseeker_next_page\"])\n            # Find and click the settings icon\n            helper.find_and_click_image(IMAGE_IDS[\"settings_icon\"])\n    \n            helper.find_text(\"PARAMETERS\", allowable_difference=2)\n    \n            # Verify that the main parameters were saved\n            for key, details in main_parameters.items():\n                helper.click_point(details[\"location\"])\n                WebDriverWait(driver, 30).until(\n                        EC.presence_of_element_located((AppiumBy.ID, APP_IDS[\"VALUE_ALERT\"]))\n                    )\n                text_box = driver.find_element(AppiumBy.ID, APP_IDS[\"TEXT_BOX\"])\n                assert float(text_box.text) == details[\"num\"], f\"Expected {details['num']} but got {text_box.text}\"\n    \n                logging.info(f\"Success: {key} retained the value {details['num']}.\")\n    \n                ok_button = driver.find_element(by=AppiumBy.ID, value=APP_IDS[\"OK_ID\"])\n                ok_button.click()\n                driver.execute_script('mobile: hideKeyboard')\n    \n                sleep(5)\n    \n            logging.info(f\"Success: Fast Filter selection saved.\")\n            helper.find_image(IMAGE_IDS[\"checked_icon\"])\n    \n            helper.find_and_click_image(IMAGE_IDS[\"checked_icon\"])\n    \n            # Verify that the boom settings were saved\n            helper.find_and_click_image(IMAGE_IDS[\"boom_config_icon\"])\n            helper.find_text(\"BOOM\", 15)\n            for key, details in boom_parameters.items():\n                if key == \"nozzles\":\n                    # Find and confirm the number of nozzles in the area of the location\n                    helper.find_text(details[\"num\"], screen_part=\"center\")\n                    logging.info(f\"Success: {key} retained the value {details['num']}.\")\n                else:\n                    pass\n                    helper.click_point(details[\"location\"])\n                    WebDriverWait(driver, 30).until(\n                        EC.presence_of_element_located((AppiumBy.ID, APP_IDS[\"VALUE_ALERT\"]))\n                    )\n                    text_box = driver.find_element(AppiumBy.ID, APP_IDS[\"TEXT_BOX\"])\n                    assert float(text_box.text) == details[\"num\"], f\"Expected {details['num']} but got {text_box.text}\"\n    \n                    logging.info(f\"Success: {key} retained the value {details['num']}.\")\n    \n                    ok_button = driver.find_element(by=AppiumBy.ID, value=APP_IDS[\"OK_ID\"])\n                    ok_button.click()\n                    driver.execute_script('mobile: hideKeyboard')\n    \n                    ack_button = WebDriverWait(driver, 30).until(\n                            EC.element_to_be_clickable((AppiumBy.ID, APP_IDS[\"ACK_BUTTON\"]))\n                        )\n                    ack_button.click()\n                    sleep(5)\n    \n            helper.find_and_click_image(IMAGE_IDS[\"back_icon\"])\n    \n            helper.find_and_click_image(IMAGE_IDS[\"pressure_config_icon\"])\n    \n            # Verify that the sprayer settings were saved\n            for key, details in sprayer_parameters.items():\n                helper.click_point(details[\"location\"])\n                WebDriverWait(driver, 30).until(\n                        EC.presence_of_element_located((AppiumBy.ID, APP_IDS[\"VALUE_ALERT\"]))\n                    )\n                text_box = driver.find_element(AppiumBy.ID, APP_IDS[\"TEXT_BOX\"])\n                assert float(text_box.text) == details[\"num\"], f\"Expected {details['num']} but got {text_box.text}\"\n    \n                logging.info(f\"Success: {key} retained the value {details['num']}.\")\n    \n                ok_button = driver.find_element(by=AppiumBy.ID, value=APP_IDS[\"OK_ID\"])\n                ok_button.click()\n                driver.execute_script('mobile: hideKeyboard')\n    \n                sleep(5)\n    \n            # Set up and verify sprayer type parameters\n            type_input = {}\n            for key, details in sprayer_type_parameters.items():\n                for choice in details[\"choices\"]:\n    \n                    type_input = {\n                        \"num\":\n                            random.choice([5.5, 6.5, 7.5, 8.5]) if choice is APP_IDS[\"FREQUENCY\"]\n                            else random.choice([10, 20, 30, 40]) if choice is APP_IDS[\"SIMULATED\"]\n                            else None,\n                        \"location\":\n                            (717, 590) if choice is APP_IDS[\"FREQUENCY\"]\n                            else (736, 500) if choice is APP_IDS[\"SIMULATED\"]\n                            else None}\n    \n    \n                    helper.click_point(details[\"location\"])\n    \n                    sensor_type = WebDriverWait(driver, 60).until(\n                    EC.presence_of_element_located((AppiumBy.XPATH, choice))\n                    )\n                    sensor_type.click()\n                    ack_button = WebDriverWait(driver, 30).until(\n                            EC.element_to_be_clickable((AppiumBy.ID, APP_IDS[\"ACK_BUTTON\"]))\n                        )\n                    ack_button.click()\n                    if type_input[\"num\"] is not None:\n                        helper.click_point(type_input[\"location\"])\n                        helper.enter_text(type_input[\"num\"])\n    \n                        helper.restart_app()\n    \n                        # Find and click the WeedSeeker next page button\n                        helper.find_and_click_image(IMAGE_IDS[\"weedseeker_next_page\"])\n                        # Find and click the settings icon\n                        helper.find_and_click_image(IMAGE_IDS[\"settings_icon\"])\n    \n                        helper.find_and_click_image(IMAGE_IDS[\"pressure_config_icon\"])\n    \n                        # After restart, confirm that type_input is saved\n                        helper.click_point(type_input[\"location\"])\n                        WebDriverWait(driver, 30).until(\n                            EC.presence_of_element_located((AppiumBy.ID, APP_IDS[\"VALUE_ALERT\"]))\n                        )\n                        text_box = driver.find_element(AppiumBy.ID, APP_IDS[\"TEXT_BOX\"])\n                        assert float(text_box.text) == type_input[\"num\"], f\"Expected {type_input['num']} but got {text_box.text}\"\n    \n                        logging.info(f\"Success: {key} retained the value {type_input['num']}.\")\n    \n                        ok_button = driver.find_element(by=AppiumBy.ID, value=APP_IDS[\"OK_ID\"])\n                        ok_button.click()\n                        driver.execute_script('mobile: hideKeyboard')\n    \n                        sleep(5)\n    \n            helper.find_and_click_image(IMAGE_IDS[\"go_home_icon\"])\n    \n            helper.stop_screen_recording(test_name)\n        except Exception as e:\n>           helper.raise_and_stop(e, test_name)\n\ntest_cases.py:334: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utils.AppiumHelper object at 0x10ab32d50>\nmessage = TimeoutException(\"Text '30' not found within 30 seconds\"), testcase = 'AGINFRA-694'\n\n    def raise_and_stop(self, message, testcase):\n        \"\"\"\n        Raise an assertion error with the specified message and stop screen recording.\n    \n        :param message: Error message to raise.\n        :param testcase: Name of the test case.\n        \"\"\"\n        logging.error(Fore.RED + str(message))\n        self.stop_screen_recording(testcase)\n        self.capture_screenshot(f'{testcase}: {message}')\n>       raise AssertionError(message)\nE       AssertionError: Message: Text '30' not found within 30 seconds\n\nutils.py:343: AssertionError","steps":[],"attachments":[{"uid":"2dc9ebfaa1a9f6f4","name":"AGINFRA-694 Video","source":"2dc9ebfaa1a9f6f4.mp4","type":"video/mp4","size":7798448},{"uid":"8ab42692e19f19b6","name":"AGINFRA-694: Message: Text '30' not found within 30 seconds\n","source":"8ab42692e19f19b6.png","type":"image/png","size":92939},{"uid":"7661c9811e1bc281","name":"log","source":"7661c9811e1bc281.txt","type":"text/plain","size":35862},{"uid":"1a7ddda26743f1f9","name":"stderr","source":"1a7ddda26743f1f9.txt","type":"text/plain","size":19528}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":4,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"feature","value":"WeedSeeker2"},{"name":"severity","value":"normal"},{"name":"story","value":"Configuration"},{"name":"suite","value":"test_cases"},{"name":"host","value":"aemch-us-la1"},{"name":"thread","value":"3350-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_cases"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://jira.trimble.tools/browse/AGINFRA-694","url":"https://jira.trimble.tools/browse/AGINFRA-694","type":"issue"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":1,"unknown":0,"total":2},"items":[{"uid":"65029bc3d1538ef6","status":"passed","time":{"start":1737760451935,"stop":1737760730401,"duration":278466}}]},"tags":[]},"source":"89ed64b7c61dba1f.json","parameterValues":[]}